[project]
name = "hackathon"
version = "0.1.0"
description = "A toolkit for rapidly prototyping AI projects during hackathons, providing essential components for LLMs, computer vision, and data processing."
readme = "README.md"
authors = [{ name = "Igor Jakus", email = "igorjakus@protonmail.com" }]

requires-python = ">=3.12"

# Comment out any dependencies you don't need for your project
# For example, if you don't need computer vision support, comment out opencv-python and pillow
dependencies = [
    # Core AI and ML
    # "torch>=2.2.0",
    # "pandas>=2.2.3",
    # "numpy>=1.26.0",
    # "scipy>=1.12.0",
    # "scikit-learn>=1.3.2",

    # Tracking and Experimentation
    # "wandb",               # for logging and tracking experiments
    # "optuna>=3.4.0",       # for hyperparameter optimization
    # "langfuse>=2.59.7",    # tracking api calls and logs

    # Data Visualization
    # "matplotlib>=3.8.3",
    # "seaborn>=0.13.2",
    # "plotly>=5.19.0",

    # Natural Language Processing
    # "transformers>=4.38.1",
    # "langchain>=0.3.20",
    # "langchain-openai>=0.3.8",
    # "langchain-anthropic>=0.3.9",
    # "openai>=1.12.0",
    # "tiktoken>=0.4.0",
    # "nltk>=3.8.1",

    # Audio Processing
    # "openai-whisper",
    # "ffmpeg-python>=0.2.0",      # required for Whisper audio processing

    # Computer Vision
    # "opencv-python>=4.9.0.80",
    # "pillow>=10.2.0",

    # API Development
    # "fastapi[standard]>=0.110.0",
    # "uvicorn>=0.27.1",

    # Utils
    # "pydantic>=1.10.12",
    # "loguru>=0.7.3",
    # "tqdm>=4.66.0",
    # "python-dotenv>=1.0.0",
    # "notebook>=6.5.4",       # for Jupyter Notebook support
    # "passlib[bcrypt]<2.0.0,>=1.7.4",
    # "bcrypt==4.0.1",  # pin bcrypt until passlib supports the latest

    # Databases including Vector Storage & Embeddings
    # "chromadb>=0.4.24",
    # "sentence-transformers>=2.4.0",  # for generating embeddings
    # "pgcli>=4.3.0",
    # "sqlmodel>=0.0.24",
    # "sqlalchemy",
    "psycopg",
    "alembic>=1.16.2",  # for database migrations
]

[dependency-groups]
dev = [
    "pre-commit>=4.1.0", # for pre-commit hooks
    "pytest>=8.3.5",     # for testing
    "ruff>=0.11.0",      # for linting and formatting
    "mypy>=1.15.0",      # for static type checking
]

[tool.ruff]
line-length = 120
fix = true
force-exclude = true  # useful for pre-commit hooks https://docs.astral.sh/ruff/settings/#force-exclude

[tool.ruff.lint]
extend-select = ["I"]              # isort
ignore = ["E111", "E114", "E117"]  # don't enforce specific indentation

[tool.mypy]
ignore_missing_imports = true
no_error_summary = true
# strict = true


[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/app/alembic"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the exec runner,
# execute a binary
# name = "ruff"
# type = "exec"
# executable = "%(here)s/.venv/bin/ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"

